local module = {}

--[[ base64 handler ]]--
--setup, created by someone in roblox dev forum cuz im too lazy to make it myself
local alphabet = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ+/"
local base = {}

for i = 0, 63 do
	base[i] = alphabet:sub(i+1,i+1)
	base[alphabet:sub(i+1,i+1)] = i
end

local S1 = {}  --B64 Character 1-2 for ASCII character 1-2
local S2 = {}  --B64 Character 3-4 for ASCII character 2-3
local S3 = {}  --ASCII Character 1 for B64 characters 1-2
local S4 = {}  --ASCII Character 2 for B64 characters 2-3
local S5 = {}  --ASCII Character 3 for B64 characters 3-4
local C1 = 0
local C2 = 0
local C3 = 0

for C1 = 0, 255 do
	for C2 = 0, 255 do
		local Sum = C3 * 65536 + C2 * 256 + C1
		
		local B1 = base[ bit32.extract(Sum, 0,6) ]
		local B2 = base[ bit32.extract(Sum, 6,6) ]
		
		S1[string.char(C1, C2)] = B1 .. B2
		S3[B1 .. B2] = string.char(C1)
	end
end

for C2 = 0, 255 do
	for C3 = 0, 255 do
		local Sum = C3 * 65536 + C2 * 256 + C1
		
		local B3 = base[ bit32.extract(Sum,12,6) ]
		local B4 = base[ bit32.extract(Sum,18,6) ]

		S2[string.char(C2, C3)] = B3 .. B4
		S5[B3 .. B4] = string.char(C3)
	end
end

for C1 = 0, 192, 64 do
	for C2 = 0, 255 do
		for C3 = 0, 3 do
			local Sum = C3 * 65536 + C2 * 256 + C1
			
			local B2 = base[ bit32.extract(Sum, 6,6) ]
			local B3 = base[ bit32.extract(Sum,12,6) ]
			
			S4[B2 .. B3] = string.char(C2)
		end
	end
end

function module:Encode(method, data)
  if method == "BINARY" then
    local result = ""
    for i = 1, #data do
        local byte = string.byte(data, i)
        local bits = ""
        for j = 7, 0, -1 do
            bits = bits .. (byte // (2^j) % 2)
        end
        result = result .. bits
    end
    return result
  elseif method == "HEX" then
    local result = ""
    for i = 1, #data do
        local byte = string.byte(data, i)
        result = result .. string.format("%02X", byte)
    end
    return result
  elseif method == "BASE64" then
    if data == 0 then return "" end
	  local padding = -#data % 3
	  data ..= string.rep("\0", padding)
	  local result = table.create(#data/3*2+1, "    ")
	  result[1] = base[padding]
	  local index = 2
	  for i = 1, #data, 3 do
		  result[index  ] = S1[data:sub(i,  i+1)]
		  result[index+1] = S2[data:sub(i+1,i+2)]
		  index += 2
	  end
	  return table.concat(result,"")
  end
end

function module:Decode(method, data)
  if method == "BINARY" then
    local result = ""
    for i = 1, #data, 8 do
        local byte_str = data:sub(i, i+7)
        local byte = 0
        for j = 0, 7 do
            local bit = byte_str:sub(j+1, j+1)
            if bit == "1" then
                byte = byte + 2^(7-j)
            end
        end
        result = result .. string.char(byte)
    end
    return result
  elseif method == "HEX" then
    local result = ""
    for i = 1, #data, 2 do
        local byte_str = data:sub(i, i+1)
        local byte = tonumber(byte_str, 16)
        if byte then
            result = result .. string.char(byte)
        else
            result = result .. "?"
        end
    end
    return result
  elseif method == "BASE64" then
	  if data == "E" or data == "" then return "" end
	  local padding = base[data:sub(1,1)]
  	local result = table.create((#data-1)/4*3, "   ")
	  local index = 1
	  for i = 2, #data, 4 do
		  result[index  ] = S3[data:sub(i,  i+1)]
	  	result[index+1] = S4[data:sub(i+1,i+2)]
		  result[index+2] = S5[data:sub(i+2,i+3)]
		  index += 3
	  end
	  local concatted = table.concat(result)
	  return concatted:sub(1, #concatted-padding)
  end
end

return module
